"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findSync = exports.find = exports.findAsync = void 0;
const tslib_1 = require("tslib");
const path = require("path");
const fs_1 = require("fs");
const debug = require("debug");
const log = debug('new-find-package-json:main');
/**
 * Find "package.json" files, starting from "input"
 * @param input Input Path to start searching from
 * @param base Base path, combined with input to form an absolute path (default: `process.cwd()`)
 * @param fileName The filename to search for (default: `package.json`)
 */
function findAsync(input, base, fileName) {
    return tslib_1.__asyncGenerator(this, arguments, function* findAsync_1() {
        log(`findSync: called with "${input}" and "${base}" and "${fileName}"`);
        base = !!base ? base : '';
        const useFileName = !!fileName ? fileName : 'package.json';
        const useBase = !!base || path.isAbsolute(base) ? base : process.cwd();
        let testPath = path.resolve(useBase, input);
        let wasRoot = false;
        while (testPath) {
            // Exectue search for "package.json" even on "/" | "C:"
            if (testPath === path.parse(testPath).root) {
                wasRoot = true;
            }
            const testFile = path.resolve(testPath, useFileName);
            log(`findSync: testing path "${testFile}"`);
            const result = yield tslib_1.__await(statPathAsync(testFile));
            if (!!result && result.isFile()) {
                log(`findSync: path exists and is file "${testFile}"`);
                yield yield tslib_1.__await(testFile);
                log(`findSync: after yield`);
            }
            // stop looping after having searched root, because there is no more going up
            if (wasRoot) {
                break;
            }
            testPath = path.resolve(testPath, '..');
        }
    });
}
exports.findAsync = findAsync;
exports.find = findAsync;
/**
 * Find "package.json" files, starting from "input"
 * @param input Input Path to start searching from
 * @param base Base path, combined with input to form an absolute path (default: `process.cwd()`)
 * @param fileName The filename to search for (default: `package.json`)
 */
function* findSync(input, base, fileName) {
    log(`findSync: called with "${input}" and "${base}" and "${fileName}"`);
    base = !!base ? base : '';
    const useFileName = !!fileName ? fileName : 'package.json';
    const useBase = !!base || path.isAbsolute(base) ? base : process.cwd();
    let testPath = path.resolve(useBase, input);
    let wasRoot = false;
    while (testPath) {
        // Exectue search for "package.json" even on "/" | "C:"
        if (testPath === path.parse(testPath).root) {
            wasRoot = true;
        }
        const testFile = path.resolve(testPath, useFileName);
        log(`findSync: testing path "${testFile}"`);
        const result = statPathSync(testFile);
        if (!!result && result.isFile()) {
            log(`findSync: path exists and is file "${testFile}"`);
            yield testFile;
            log(`findSync: after yield`);
        }
        // stop looping after having searched root, because there is no more going up
        if (wasRoot) {
            break;
        }
        testPath = path.resolve(testPath, '..');
    }
}
exports.findSync = findSync;
/**
 * Run "fs.promises.stat", but return "undefined" if error is "ENOENT"
 * follows symlinks
 * @param path The Path to Stat
 * @throws if the error is not "ENOENT"
 */
function statPathSync(path) {
    try {
        return fs_1.statSync(path);
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            return undefined; // catch the error if the directory dosnt exist, without throwing an error
        }
        throw err;
    }
}
/**
 * Run "fs.promises.stat", but return "undefined" if error is "ENOENT"
 * follows symlinks
 * @param path The Path to Stat
 * @throws if the error is not "ENOENT"
 */
function statPathAsync(path) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return fs_1.promises.stat(path).catch((err) => {
            if (err.code === 'ENOENT') {
                return undefined; // catch the error if the directory dosnt exist, without throwing an error
            }
            throw err;
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDZCQUE2QjtBQUM3QiwyQkFBNkQ7QUFDN0QsK0JBQStCO0FBRS9CLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRWhEOzs7OztHQUtHO0FBQ0gsU0FBdUIsU0FBUyxDQUFDLEtBQWEsRUFBRSxJQUFhLEVBQUUsUUFBaUI7O1FBQzlFLEdBQUcsQ0FBQywwQkFBMEIsS0FBSyxVQUFVLElBQUksVUFBVSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRXhFLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMxQixNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUMzRCxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZFLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztRQUVwQixPQUFPLFFBQVEsRUFBRTtZQUNmLHVEQUF1RDtZQUN2RCxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDMUMsT0FBTyxHQUFHLElBQUksQ0FBQzthQUNoQjtZQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lB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